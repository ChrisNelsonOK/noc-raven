# ðŸ¦… NoC Raven - Telegraf Configuration
# High-performance metrics collection and forwarding

[global_tags]
  # Global tags for all metrics
  environment = "production"
  service = "noc-raven"
  version = "1.0.0-alpha"

[agent]
  # Agent configuration
  interval = "10s"
  round_interval = true
  metric_batch_size = 1000
  metric_buffer_limit = 10000
  collection_jitter = "0s"
  flush_interval = "10s"
  flush_jitter = "0s"
  precision = ""
  hostname = ""
  omit_hostname = false

# =============================================================================
# INPUT PLUGINS
# =============================================================================

# System metrics
[[inputs.cpu]]
  percpu = true
  totalcpu = true
  collect_cpu_time = false
  report_active = false

[[inputs.disk]]
  ignore_fs = ["tmpfs", "devtmpfs", "devfs", "iso9660", "overlay", "aufs", "squashfs"]

[[inputs.diskio]]

[[inputs.kernel]]

[[inputs.mem]]

[[inputs.processes]]

[[inputs.swap]]

[[inputs.system]]

# Network metrics
[[inputs.net]]
  interfaces = ["eth*", "en*"]

[[inputs.netstat]]

# Docker metrics (if running in container environment)
[[inputs.docker]]
  endpoint = "unix:///var/run/docker.sock"
  gather_services = false
  container_names = []
  source_tag = false
  container_name_include = []
  container_name_exclude = []
  timeout = "5s"
  perdevice = true
  total = false

# NoC Raven specific metrics
[[inputs.procstat]]
  pattern = "goflow2"
  pid_tag = false
  prefix = "goflow2"

[[inputs.procstat]]
  pattern = "fluent-bit"
  pid_tag = false
  prefix = "fluent_bit"

[[inputs.procstat]]
  pattern = "vector"
  pid_tag = false
  prefix = "vector"

[[inputs.procstat]]
  pattern = "nginx"
  pid_tag = false
  prefix = "nginx"

# HTTP response monitoring
[[inputs.http_response]]
  urls = ["http://localhost:8080/health"]
  response_timeout = "5s"
  method = "GET"
  follow_redirects = false
  name_override = "web_interface_health"

[[inputs.http_response]]
  urls = ["http://localhost:8084/health"]
  response_timeout = "5s"
  method = "GET"
  follow_redirects = false
  name_override = "vector_api_health"

# Port monitoring for telemetry services
[[inputs.net_response]]
  protocol = "udp"
  address = "localhost:514"
  timeout = "3s"
  name_override = "syslog_port_check"

[[inputs.net_response]]
  protocol = "udp"
  address = "localhost:2055"
  timeout = "3s"
  name_override = "netflow_port_check"

[[inputs.net_response]]
  protocol = "udp"
  address = "localhost:6343"
  timeout = "3s"
  name_override = "sflow_port_check"

[[inputs.net_response]]
  protocol = "udp"
  address = "localhost:162"
  timeout = "3s"
  name_override = "snmp_trap_port_check"

# Log file monitoring for error rates
[[inputs.logparser]]
  files = ["/var/log/noc-raven/*.log"]
  from_beginning = false
  name_override = "noc_raven_logs"
  
  [inputs.logparser.grok]
    patterns = ["%{TIMESTAMP_ISO8601:timestamp} %{WORD:level} %{GREEDYDATA:message}"]
    measurement = "log_events"
    timezone = "UTC"

# File system monitoring for data directories
[[inputs.filestat]]
  files = [
    "/data/syslog/*",
    "/data/flows/*",
    "/data/snmp/*",
    "/data/metrics/*"
  ]
  name_override = "data_file_stats"

# =============================================================================
# PROCESSOR PLUGINS
# =============================================================================

# Add hostname and other metadata
[[processors.regex]]
  namepass = ["*"]
  
  [[processors.regex.tags]]
    key = "host"
    pattern = "^(.*)$"
    replacement = "noc-raven-${1}"

# Convert bytes to human readable units
[[processors.converter]]
  namepass = ["disk*", "mem*", "docker*"]
  
  [processors.converter.fields]
    integer = ["*_bytes"]
    tag = ["*"]

# =============================================================================
# AGGREGATOR PLUGINS
# =============================================================================

# Basic statistics for response times
[[aggregators.basicstats]]
  period = "30s"
  drop_original = false
  stats = ["count", "min", "max", "mean", "stdev", "s2", "sum"]
  namepass = ["http_response*", "net_response*"]

# Histogram for performance metrics
[[aggregators.histogram]]
  period = "30s"
  drop_original = false
  namepass = ["cpu", "mem", "disk*"]
  
  [[aggregators.histogram.config]]
    buckets = [0.1, 0.5, 1.0, 2.5, 5.0, 10.0]
    measurement_name = "performance_histogram"

# =============================================================================
# OUTPUT PLUGINS
# =============================================================================

# InfluxDB v2 output (primary metrics storage)
[[outputs.influxdb_v2]]
  urls = ["http://localhost:8086"]
  token = "$INFLUX_TOKEN"
  organization = "noc-raven"
  bucket = "telemetry"
  timeout = "5s"
  user_agent = "telegraf-noc-raven"
  
  # Optional: Batch configuration for high throughput
  batch_size = 5000
  batch_timeout = "1s"

# Prometheus metrics endpoint
[[outputs.prometheus_client]]
  listen = ":9273"
  metric_version = 2
  path = "/metrics"
  expiration_interval = "60s"
  collectors_exclude = ["gocollector", "process"]

# Vector output for additional processing
[[outputs.http]]
  url = "http://localhost:8084/v1/events"
  timeout = "5s"
  method = "POST"
  username = ""
  password = ""
  data_format = "json"
  content_encoding = "gzip"
  
  [outputs.http.headers]
    Content-Type = "application/json"
    X-Source = "telegraf"

# File output for debugging (optional)
# [[outputs.file]]
#   files = ["/var/log/noc-raven/telegraf-debug.log"]
#   rotation_interval = "24h"
#   rotation_max_size = "100MB"
#   rotation_max_archives = 5
#   data_format = "influx"

# Syslog output for centralized logging
[[outputs.syslog]]
  address = "udp://localhost:514"
  facility = "local0"
  tag = "telegraf"
  default_severity_code = 6
  data_format = "json"
  namepass = ["log_events", "*_health"]

# =============================================================================
# SNMP TRAP COLLECTION
# =============================================================================

# SNMP Trap receiver - Primary collection method
[[inputs.snmp_trap]]
  service_address = "udp://:162"
  timeout = "5s"
  retries = 3
  version = 2
  community = "public"
  max_repetitions = 10
  
  # Security settings for SNMPv3 (optional)
  # sec_name = "myuser"
  # sec_level = "authPriv" 
  # auth_protocol = "SHA"
  # auth_password = "myauthpassword"
  # priv_protocol = "AES"
  # priv_password = "myprivpassword"
  
  # Path to MIB files
  path = ["/usr/share/snmp/mibs", "/opt/noc-raven/mibs"]
  
# SNMP Trap via socket (alternative method)
[[inputs.socket_listener]]
  service_address = "udp://:162"
  data_format = "json"
  json_string_fields = ["message", "trap_type", "oid"]
  tag_keys = ["host", "agent", "community"]
  name_override = "snmp_trap_socket"

# Legacy SNMP polling for device status (if needed)
[[inputs.snmp]]
  agents = []  # Add SNMP device IPs dynamically via config
  version = 2
  community = "public"
  interval = "60s"
  timeout = "10s"
  retries = 3
  max_repetitions = 10

  # System information
  [[inputs.snmp.field]]
    name = "hostname"
    oid = "1.3.6.1.2.1.1.5.0"
  
  [[inputs.snmp.field]]
    name = "uptime"
    oid = "1.3.6.1.2.1.1.3.0"
    
  [[inputs.snmp.field]]
    name = "sys_description"
    oid = "1.3.6.1.2.1.1.1.0"

  # Interface statistics table
  [[inputs.snmp.table]]
    name = "interface"
    inherit_tags = ["hostname"]
    oid = "1.3.6.1.2.1.2.2"

    [[inputs.snmp.table.field]]
      name = "ifIndex"
      oid = "1.3.6.1.2.1.2.2.1.1"
      is_tag = true

    [[inputs.snmp.table.field]]
      name = "ifDescr"
      oid = "1.3.6.1.2.1.2.2.1.2"
      is_tag = true

    [[inputs.snmp.table.field]]
      name = "ifInOctets"
      oid = "1.3.6.1.2.1.2.2.1.10"

    [[inputs.snmp.table.field]]
      name = "ifOutOctets"
      oid = "1.3.6.1.2.1.2.2.1.16"

# =============================================================================
# SERVICE INPUT PLUGINS
# =============================================================================

# Internal metrics about Telegraf itself
[[inputs.internal]]
  collect_memstats = true

# =============================================================================
# OPTIONAL: CUSTOM SCRIPTS
# =============================================================================

# Custom script to collect NoC Raven specific metrics
# [[inputs.exec]]
#   commands = ["/opt/noc-raven/scripts/custom-metrics.sh"]
#   timeout = "5s"
#   interval = "30s"
#   data_format = "influx"
