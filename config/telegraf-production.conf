# ðŸ¦… NoC Raven - Enhanced Production Telegraf Configuration
# Comprehensive metrics collection and SNMP trap processing for venue environments

[global_tags]
  environment = "production"
  service = "noc-raven"
  version = "1.0.0"
  appliance = "noc-raven-001"

[agent]
  # Optimized for high-throughput venue environments
  interval = "10s"
  round_interval = true
  metric_batch_size = 5000
  metric_buffer_limit = 50000
  collection_jitter = "2s"
  flush_interval = "10s"
  flush_jitter = "2s"
  precision = ""
  hostname = ""
  omit_hostname = false
  debug = false
  quiet = false
  logfile = "/var/log/noc-raven/telegraf.log"
  logfile_rotation_interval = "24h"
  logfile_rotation_max_size = "100MB"
  logfile_rotation_max_archives = 7

# =============================================================================
# SYSTEM MONITORING - Enhanced Coverage
# =============================================================================

[[inputs.cpu]]
  percpu = true
  totalcpu = true
  collect_cpu_time = true
  report_active = true
  [inputs.cpu.tags]
    component = "system"

[[inputs.disk]]
  ignore_fs = ["tmpfs", "devtmpfs", "devfs", "iso9660", "overlay", "aufs", "squashfs", "proc", "sysfs"]
  mount_points = ["/", "/data", "/config", "/var/log"]
  [inputs.disk.tags]
    component = "storage"

[[inputs.diskio]]
  devices = ["sda*", "nvme*", "vd*"]
  [inputs.diskio.tags]
    component = "storage"

[[inputs.mem]]
  [inputs.mem.tags]
    component = "system"

[[inputs.system]]
  [inputs.system.tags]
    component = "system"

[[inputs.processes]]
  [inputs.processes.tags]
    component = "system"

[[inputs.kernel]]
  [inputs.kernel.tags]
    component = "system"

# =============================================================================
# NETWORK MONITORING - Comprehensive Coverage
# =============================================================================

[[inputs.net]]
  interfaces = ["eth*", "en*", "docker*", "br-*"]
  ignore_protocol_stats = false
  [inputs.net.tags]
    component = "network"

[[inputs.netstat]]
  [inputs.netstat.tags]
    component = "network"

# =============================================================================
# NOC RAVEN SERVICE MONITORING - All Components
# =============================================================================

[[inputs.procstat]]
  pattern = "goflow2"
  pid_tag = false
  prefix = "goflow2"
  [inputs.procstat.tags]
    component = "telemetry"
    service = "goflow2"

[[inputs.procstat]]
  pattern = "fluent-bit"
  pid_tag = false
  prefix = "fluent_bit"
  [inputs.procstat.tags]
    component = "telemetry"
    service = "fluent-bit"

[[inputs.procstat]]
  pattern = "vector"
  pid_tag = false
  prefix = "vector"
  [inputs.procstat.tags]
    component = "telemetry"
    service = "vector"

[[inputs.procstat]]
  pattern = "nginx"
  pid_tag = false
  prefix = "nginx"
  [inputs.procstat.tags]
    component = "web"
    service = "nginx"

[[inputs.procstat]]
  pattern = "config-service"
  pid_tag = false
  prefix = "config_service"
  [inputs.procstat.tags]
    component = "api"
    service = "config-service"

[[inputs.procstat]]
  pattern = "buffer-manager"
  pid_tag = false
  prefix = "buffer_manager"
  [inputs.procstat.tags]
    component = "storage"
    service = "buffer-manager"

# =============================================================================
# HTTP HEALTH MONITORING - All Services
# =============================================================================

[[inputs.http_response]]
  urls = [
    "http://localhost:8080/health",
    "http://localhost:8080/api/config"
  ]
  response_timeout = "10s"
  method = "GET"
  follow_redirects = true
  name_override = "web_interface_health"
  [inputs.http_response.tags]
    component = "web"
    service = "nginx"

[[inputs.http_response]]
  urls = ["http://localhost:8084/health"]
  response_timeout = "10s"
  method = "GET"
  follow_redirects = false
  name_override = "vector_api_health"
  [inputs.http_response.tags]
    component = "telemetry"
    service = "vector"

[[inputs.http_response]]
  urls = ["http://localhost:5005/health"]
  response_timeout = "10s"
  method = "GET"
  follow_redirects = false
  name_override = "buffer_manager_health"
  [inputs.http_response.tags]
    component = "storage"
    service = "buffer-manager"

# =============================================================================
# PORT MONITORING - All Telemetry Endpoints
# =============================================================================

[[inputs.net_response]]
  protocol = "udp"
  address = "localhost:514"
  timeout = "5s"
  name_override = "syslog_port_check"
  [inputs.net_response.tags]
    component = "telemetry"
    service = "fluent-bit"
    port_type = "syslog"

[[inputs.net_response]]
  protocol = "udp"
  address = "localhost:2055"
  timeout = "5s"
  name_override = "netflow_port_check"
  [inputs.net_response.tags]
    component = "telemetry"
    service = "goflow2"
    port_type = "netflow"

[[inputs.net_response]]
  protocol = "udp"
  address = "localhost:4739"
  timeout = "5s"
  name_override = "ipfix_port_check"
  [inputs.net_response.tags]
    component = "telemetry"
    service = "goflow2"
    port_type = "ipfix"

[[inputs.net_response]]
  protocol = "udp"
  address = "localhost:6343"
  timeout = "5s"
  name_override = "sflow_port_check"
  [inputs.net_response.tags]
    component = "telemetry"
    service = "goflow2"
    port_type = "sflow"

[[inputs.net_response]]
  protocol = "udp"
  address = "localhost:162"
  timeout = "5s"
  name_override = "snmp_trap_port_check"
  [inputs.net_response.tags]
    component = "telemetry"
    service = "telegraf"
    port_type = "snmp_trap"

[[inputs.net_response]]
  protocol = "tcp"
  address = "localhost:8084"
  timeout = "5s"
  name_override = "windows_events_port_check"
  [inputs.net_response.tags]
    component = "telemetry"
    service = "vector"
    port_type = "http"

# =============================================================================
# SNMP TRAP COLLECTION - PRODUCTION READY
# =============================================================================

# Primary SNMP Trap receiver with comprehensive support
[[inputs.snmp_trap]]
  service_address = "udp://:162"
  timeout = "10s"
  retries = 5
  version = 2
  community = "public"
  max_repetitions = 25
  
  # SNMPv3 security settings (uncomment and configure as needed)
  # sec_name = "nocuser"
  # sec_level = "authPriv"
  # auth_protocol = "SHA"
  # auth_password = "nocauthpassword"
  # priv_protocol = "AES"
  # priv_password = "nocprivpassword"
  
  # Comprehensive MIB paths for enterprise environments
  path = [
    "/usr/share/snmp/mibs",
    "/opt/noc-raven/mibs",
    "/usr/share/mibs/ietf",
    "/usr/share/mibs/iana"
  ]
  
  [inputs.snmp_trap.tags]
    component = "snmp"
    service = "telegraf"
    collection_method = "trap_receiver"

# SNMP Trap via socket listener (backup method)
[[inputs.socket_listener]]
  service_address = "udp://:1162"
  data_format = "json"
  json_string_fields = ["message", "trap_type", "oid", "community", "agent_address"]
  tag_keys = ["host", "agent", "community", "version", "trap_type"]
  name_override = "snmp_trap_socket"
  read_timeout = "10s"
  [inputs.socket_listener.tags]
    component = "snmp"
    service = "telegraf"
    collection_method = "socket_listener"

# Enhanced SNMP polling for device monitoring
[[inputs.snmp]]
  agents = []  # Dynamically populated via config API
  version = 2
  community = "public"
  interval = "300s"  # 5 minutes
  timeout = "30s"
  retries = 5
  max_repetitions = 25
  
  # Standard system information
  [[inputs.snmp.field]]
    name = "hostname"
    oid = "1.3.6.1.2.1.1.5.0"
    is_tag = true
    
  [[inputs.snmp.field]]
    name = "uptime_seconds"
    oid = "1.3.6.1.2.1.1.3.0"
    conversion = "int"
    
  [[inputs.snmp.field]]
    name = "sys_description"
    oid = "1.3.6.1.2.1.1.1.0"
    
  # Interface statistics table
  [[inputs.snmp.table]]
    name = "interface"
    inherit_tags = ["hostname"]
    oid = "1.3.6.1.2.1.2.2"

    [[inputs.snmp.table.field]]
      name = "ifIndex"
      oid = "1.3.6.1.2.1.2.2.1.1"
      is_tag = true

    [[inputs.snmp.table.field]]
      name = "ifDescr"
      oid = "1.3.6.1.2.1.2.2.1.2"
      is_tag = true

    [[inputs.snmp.table.field]]
      name = "ifOperStatus"
      oid = "1.3.6.1.2.1.2.2.1.8"

    [[inputs.snmp.table.field]]
      name = "ifInOctets"
      oid = "1.3.6.1.2.1.2.2.1.10"

    [[inputs.snmp.table.field]]
      name = "ifOutOctets"
      oid = "1.3.6.1.2.1.2.2.1.16"

  [inputs.snmp.tags]
    component = "snmp"
    service = "telegraf"
    collection_method = "polling"

# =============================================================================
# ADVANCED MONITORING
# =============================================================================

# Log file monitoring with pattern matching
[[inputs.logparser]]
  files = [
    "/var/log/noc-raven/*.log",
    "/data/logs/*.log"
  ]
  from_beginning = false
  name_override = "noc_raven_logs"
  watch_method = "inotify"
  
  [inputs.logparser.grok]
    patterns = [
      "%{TIMESTAMP_ISO8601:timestamp} %{WORD:level} %{GREEDYDATA:message}",
      "%{TIMESTAMP_ISO8601:timestamp} \\[%{WORD:level}\\] %{GREEDYDATA:message}"
    ]
    measurement = "log_events"
    timezone = "UTC"
    
  [inputs.logparser.tags]
    component = "logs"
    service = "telegraf"

# File system monitoring
[[inputs.filestat]]
  files = [
    "/data/syslog/**",
    "/data/flows/**",
    "/data/snmp/**",
    "/data/metrics/**",
    "/data/buffer/**",
    "/var/log/noc-raven/**"
  ]
  name_override = "data_file_stats"
  [inputs.filestat.tags]
    component = "storage"
    service = "telegraf"

# Docker metrics (if applicable)
[[inputs.docker]]
  endpoint = "unix:///var/run/docker.sock"
  gather_services = false
  container_names = []
  source_tag = false
  container_name_include = ["noc-raven*"]
  container_name_exclude = []
  timeout = "5s"
  perdevice = true
  total = false
  [inputs.docker.tags]
    component = "container"

# Internal Telegraf metrics
[[inputs.internal]]
  collect_memstats = true
  [inputs.internal.tags]
    component = "telegraf"
    service = "self"

# =============================================================================
# PROCESSORS - Data Enhancement
# =============================================================================

# Add hostname prefix for identification
[[processors.regex]]
  namepass = ["*"]
  
  [[processors.regex.tags]]
    key = "host"
    pattern = "^(.*)$"
    replacement = "noc-raven-${1}"

# Enhanced unit conversion
[[processors.converter]]
  namepass = ["disk*", "mem*", "docker*", "interface*"]
  
  [processors.converter.fields]
    integer = ["*_bytes", "*_octets"]
    float = ["*_percent"]

# =============================================================================
# AGGREGATORS - Statistical Analysis
# =============================================================================

# Basic statistics for response times
[[aggregators.basicstats]]
  period = "60s"
  drop_original = false
  stats = ["count", "min", "max", "mean", "stdev", "sum"]
  namepass = ["http_response*", "net_response*", "*_health"]

# =============================================================================
# OUTPUT PLUGINS - Production Data Storage and Forwarding
# =============================================================================

# Vector integration for advanced processing
[[outputs.http]]
  url = "http://localhost:8084/v1/events"
  timeout = "10s"
  method = "POST"
  data_format = "json"
  content_encoding = "gzip"
  
  [outputs.http.headers]
    Content-Type = "application/json"
    X-Source = "telegraf"
    X-Appliance = "noc-raven"
    
  [outputs.http.tags]
    component = "output"
    destination = "vector"

# Prometheus metrics export
[[outputs.prometheus_client]]
  listen = ":9273"
  metric_version = 2
  path = "/metrics"
  expiration_interval = "300s"
  collectors_exclude = ["gocollector", "process"]
  string_as_label = true
  
  [outputs.prometheus_client.tags]
    component = "output"
    format = "prometheus"

# Primary file output with enhanced rotation
[[outputs.file]]
  files = ["/data/metrics/telegraf-metrics-%Y-%m-%dT%H.log"]
  rotation_interval = "1h"
  rotation_max_size = "100MB"
  rotation_max_archives = 24
  data_format = "json"
  compression_algorithm = "gzip"
  
  [outputs.file.tags]
    component = "output"
    destination = "file"

# Syslog output for log aggregation
[[outputs.syslog]]
  address = "udp://localhost:1514"
  facility = "local0"
  tag = "telegraf"
  default_severity_code = 6
  data_format = "json"
  namepass = ["log_events", "*_health", "snmp_trap*"]
  
  [outputs.syslog.tags]
    component = "output"
    destination = "syslog"

# Health summary output (reduced volume)
[[outputs.file]]
  files = ["/data/metrics/health-summary-%Y-%m-%d.log"]
  data_format = "json"
  namepass = ["*_response", "*_health", "internal_*"]
  rotation_interval = "24h"
  rotation_max_size = "50MB"
  rotation_max_archives = 3
  
  [outputs.file.tags]
    component = "output"
    destination = "health_summary"
